// Generated by IcedCoffeeScript 1.7.1-f
var Ajax, Asana, AsanaBot, dayAgo, iced, __iced_k, __iced_k_noop,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

iced = require('iced-runtime');
__iced_k = __iced_k_noop = function() {};

Asana = require("asana");

Ajax = require("awaitajax");

dayAgo = function(date) {
  return date.setDate(date.getDate() - 1);
};

AsanaBot = (function() {
  AsanaBot.prototype.taskFields = ["id", "name", "notes", "due_on", "completed", "completed_at", "created_at", "modified_at"];

  function AsanaBot(projectId, interval, hookUrl, modified_since, log) {
    this.projectId = projectId;
    this.interval = interval != null ? interval : 20;
    this.hookUrl = hookUrl;
    if (modified_since == null) {
      modified_since = 0;
    }
    this.log = log != null ? log : console;
    this.stop = __bind(this.stop, this);
    this.again = __bind(this.again, this);
    this.getTasks = __bind(this.getTasks, this);
    this.poll = __bind(this.poll, this);
    this.start = __bind(this.start, this);
    this.client = Asana.Client.basicAuth(process.env.ASANA_API_KEY);
    this.modified_since = new Date(modified_since);
    this.tasks = [];
  }

  AsanaBot.prototype.start = function() {
    if (this.running) {
      return;
    }
    this.running = true;
    return this.poll();
  };

  AsanaBot.prototype.poll = function(autocb) {
    var err, tasks, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = autocb;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    if (autocb == null) {
      autocb = function() {};
    }
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/home/charles/source/asanabot/src/asanabot.iced",
          funcname: "AsanaBot.poll"
        });
        _this.getTasks(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return tasks = arguments[0];
            };
          })(),
          lineno: 30
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (!tasks) {
          autocb(_this.again());
          return;
        }
        if (!tasks.length) {
          _this.log.log("no new tasks");
          autocb(_this.again());
          return;
        }
        tasks = _this.sortTasksByRecent(tasks);
        _this.modified_since = new Date((new Date(tasks[0].modified_at)).getTime() + 1);
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/charles/source/asanabot/src/asanabot.iced",
            funcname: "AsanaBot.poll"
          });
          _this.callWebhook(tasks, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 40
          }));
          __iced_deferrals._fulfill();
        })(function() {
          if (err) {
            _this.log.error(err);
          }
          _this.log.log(tasks);
          autocb(_this.again());
          return;
        });
      };
    })(this));
  };

  AsanaBot.prototype.getTasks = function(autocb) {
    var err, params, tasks, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = autocb;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    params = {
      modified_since: this.modified_since.toISOString(),
      opt_fields: this.taskFields.join(",")
    };
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/home/charles/source/asanabot/src/asanabot.iced",
          funcname: "AsanaBot.getTasks"
        });
        (_this.client.tasks.findByProject(_this.projectId, params)).nodeify(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return tasks = arguments[1];
            };
          })(),
          lineno: 51
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (err) {
          _this.log.error(err);
        }
        autocb(tasks);
        return;
      };
    })(this));
  };

  AsanaBot.prototype.again = function() {
    return this.timeout = setTimeout(this.poll, this.interval * 1000);
  };

  AsanaBot.prototype.stop = function() {
    if (!this.running) {
      return this.log.error("not running");
    }
    clearTimeout(this.timeout);
    return this.running = false;
  };

  AsanaBot.prototype.sortTasksByRecent = function(tasks) {
    return tasks.sort(function(a, b) {
      return (new Date(b.modified_at)) - (new Date(a.modified_at));
    });
  };

  AsanaBot.prototype.callWebhook = function(data, autocb) {
    var options, response, status, statusText, xhr, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = autocb;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    options = {
      url: this.hookUrl,
      data: data,
      rejectUnauthorized: false,
      dataType: "text/plain"
    };
    this.log.log("Posting update of project id: " + this.projectId + " to: " + this.hookUrl);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/home/charles/source/asanabot/src/asanabot.iced",
          funcname: "AsanaBot.callWebhook"
        });
        Ajax.awaitPost(options, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              status = arguments[0];
              xhr = arguments[1];
              statusText = arguments[2];
              return response = arguments[3];
            };
          })(),
          lineno: 73
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (status === "error") {
          _this.log.error("error: " + ((typeof response !== "undefined" && response !== null ? response.message : void 0) || (typeof status !== "undefined" && status !== null ? status.message : void 0) || xhr));
          _this.log.error("status: " + statusText);
          autocb(xhr.statusCode || response);
          return;
        }
        _this.log.log("success: " + statusText);
        autocb(null);
        return;
      };
    })(this));
  };

  return AsanaBot;

})();

module.exports = AsanaBot;
